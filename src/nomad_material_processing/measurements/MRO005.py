#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.eln import BasicEln
from nomad.parsing.tabular import TableData
import numpy as np
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='MRO005 archive schema')


class MyProcessColumn(BasicEln, TableData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_plot=[
            {
                "label": "Reaction Process",
                "x": "process_time",
                "y": [
                    "CalciumPhosphate_CeriumNitrate",
                    "Conductivity",
                    "pH",
                    "Stirring_Speed",
                    "Temperature"
                ]
            }
        ],)
    data_file = Quantity(
        type=str,
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        a_tabular_parser={
            "comment": "#",
            "mode": "column"
        },
    )
    process_time = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/process_time"
        },
        shape=["*"],
        unit="s",
    )
    CalciumPhosphate_CeriumNitrate = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/Ca(NO3)2 Ce(NO3)3"
        },
        a_plot={
            "label": "CalciumPhosphate_CeriumNitrate",
            "x": "process_time",
            "y": "CalciumPhosphate_CeriumNitrate"
        },
        shape=["*"],
        unit="ml",
    )
    Conductivity = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/LeitfÃ¤higkeit"
        },
        a_plot={
            "label": "Conductivity",
            "x": "process_time",
            "y": "Conductivity"
        },
        shape=["*"],
        unit="ms/cm",
    )
    pH = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/pH-Druck"
        },
        a_plot={
            "label": "pH",
            "x": "process_time",
            "y": "pH"
        },
        shape=["*"],
        unit="dimensionless",
    )
    Stirring_Speed = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/R"
        },
        a_plot={
            "label": "Stirring_Speed",
            "x": "process_time",
            "y": "Stirring_Speed"
        },
        shape=["*"],
        unit="rpm",
    )
    Temperature = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/Tr"
        },
        a_plot={
            "label": "Temperature",
            "x": "process_time",
            "y": "temperature"
        },
        shape=["*"],
        unit="celsius",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MyProcessColumn` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
