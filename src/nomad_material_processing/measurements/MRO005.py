#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.eln import BasicEln
from nomad.parsing.tabular import TableData
import numpy as np
import pandas as pd
import re
from typing import (
    TYPE_CHECKING,
)
from nomad.datamodel.metainfo.basesections import Process, ProcessStep
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.units import ureg
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='MRO005 archive schema')

class Recipe(ProcessStep, ArchiveSection):
    m_def=Section(
        a_eln={
            'properties': {
                'order': [
                    'step_number',
                    'action',
                    'duration',
                    'start_time',
                    'end_time',
                    'temperature',
                ]
            }
        },
    )
    action = Quantity(
        type=str,
        description='an action/annotation from recipe file',
        a_eln={'component':'StringEditQuantity'}
    )
    duration = Quantity(
        # probably needed normalizer to convert this datetime to seconds
        type=np.int32,
        description='the duration of the action performed',
        a_eln={'component':'NumberEditQuantity', 'defaultDisplayUnit': 'seconds'},
        unit='seconds',
    )
    start_time = Quantity(
        type=Datetime,
        description='absolute start time of an action',
        a_eln={'component': 'TimeEditQuantity'},
    )
    end_time = Quantity(
        type=Datetime,
        description='absolute end time of an action',
        a_eln={'component': 'TimeEditQuantity'},
    )
    temperature = Quantity(
        type=np.float64,
        description='relative temperature measurement during an action',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'celsius'}
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the 'Recipe' class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)

class MRO005(BasicEln, TableData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_plot=[
            {
                "label": "Reaction Process",
                "x": "process_time",
                "y": [
                    "CalciumPhosphate_CeriumNitrate",
                    "Conductivity",
                    "pH",
                    "Stirring_Speed",
                    "Temperature"
                ]
            }
        ],)
    steps = SubSection(
        section_def=Recipe,
        repeats=True
    )
    data_file = Quantity(
        type=str,
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
        a_tabular_parser={
            "comment": "#",
            "mode": "column"
        },
    )

    process_time = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/process_time"
        },
        shape=["*"],
        unit="seconds",
    )
    CalciumPhosphate_CeriumNitrate = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/Ca(NO3)2 Ce(NO3)3"
        },
        a_plot={
            "label": "CalciumPhosphate_CeriumNitrate",
            "x": "process_time",
            "y": "CalciumPhosphate_CeriumNitrate"
        },
        shape=["*"],
        unit="milliliter",
    )
    Conductivity = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/LeitfÃ¤higkeit"
        },
        a_plot={
            "label": "Conductivity",
            "x": "process_time",
            "y": "Conductivity"
        },
        shape=["*"],
        unit="ms/cm", # WHICH UNIT IS IT SUPPOSED TO BE?
    )
    pH = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/pH-Druck"
        },
        a_plot={
            "label": "pH",
            "x": "process_time",
            "y": "pH"
        },
        shape=["*"],
        unit="dimensionless",
    )
    Stirring_Speed = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/R"
        },
        a_plot={
            "label": "Stirring_Speed",
            "x": "process_time",
            "y": "Stirring_Speed"
        },
        shape=["*"],
        unit="rpm",
    )
    Temperature = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Measured values/Tr"
        },
        a_plot={
            "label": "Temperature",
            "x": "process_time",
            "y": "temperature"
        },
        shape=["*"],
        unit="celsius",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MRO005` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


        if self.data_file:
            with archive.m_context.raw_file(self.data_file, 'rb') as file:
                df = pd.read_excel(file, sheet_name='Recipe')
            dt_duration = ''
            steps = []
            for i, row in df.iterrows():
                step = Recipe()
                step.name = 'step' + str(row['#'])
                step.action = row['Action / Annotation']
                dt_duration = pd.to_timedelta(row['Duration']).total_seconds()
                step.duration = ureg.Quantity(dt_duration, 'seconds')
                step.start_time = row['Start Time']
                step.end_time = row['End Time']
                match = re.search(r'[\d.]+', str(row['Tr']))
                temperature_numeric = float(match.group()) if match else None
                step.temperature = ureg.Quantity(
                    temperature_numeric, 'celsius'
                )
                steps.append(step)
            self.steps = steps

m_package.__init_metainfo__()
